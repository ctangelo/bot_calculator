from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import executor, types
from aiogram import Bot
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from script import calculation

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
TOKEN = 'TOKEN'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
upload_btn = ReplyKeyboardMarkup(resize_keyboard=True)
btn = KeyboardButton('/upload')
upload_btn.add(btn)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
async def start_message(message: types.Message, state=FSMContext):
    current_state = await state.get_state()
    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏–ª–∏, –∞ –ø–æ—Ç–æ–º —Å—Ä–∞–∑—É –Ω–∞–∂–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π, —á—Ç–æ–± –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
    if current_state:  
        await state.finish()
    await bot.send_message(message.from_user.id, 'üëã–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /upload —á—Ç–æ–± –Ω–∞—á–∞—Ç—å', reply_markup=upload_btn)


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–∞
class FSMXlsx(StatesGroup):
    file = State()


# –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏
@dp.message_handler(commands=['upload'], state=None)
async def upload(message: types.Message, state=FSMContext):
    await FSMXlsx.file_1.set()
    await message.reply('–ó–∞–≥—Ä—É–∑–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —ç–∫—Å–µ–ª—å')
    
    
# –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['document'], state=FSMXlsx.file)
async def import_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.document.download(destination_file=f"/root/doc/{user_id}/file.xlsx")
    file = f"/root/doc/{user_id}/file.xlsx"
    
    # –ø–µ—Ä–µ–¥–∞—é –≤ —Ç–≤–æ–π —Å–∫—Ä–∏–ø—Ç –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–Ω–≥ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    calculation(file, user_id)
    # –∑–∞–±–∏—Ä–∞—é –≥–æ—Ç–æ–≤—É—é png –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    photo = InputFile(f'/root/doc/{user_id}/ready.png')
    # –æ—Ç–ø—Ä–∞–≤–ª—è—é png
    await bot.send_photo(user_id, photo)
    # –≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()


async def on_startup(_):
    print('Bot online')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)  